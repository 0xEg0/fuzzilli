diff --git a/js/src/shell/js.cpp b/js/src/shell/js.cpp
index 1c1ec8390afc..9babec1842a3 100644
--- a/js/src/shell/js.cpp
+++ b/js/src/shell/js.cpp
@@ -162,6 +162,84 @@ using mozilla::TimeDuration;
 using mozilla::TimeStamp;
 using mozilla::Variant;
 
+//
+// BEGIN FUZZING CODE
+//
+
+#define REPRL_CRFD 100
+#define REPRL_CWFD 101
+#define REPRL_DRFD 102
+#define REPRL_DWFD 103
+
+#define SHM_SIZE 0x100000
+#define MAX_EDGES ((SHM_SIZE - 4) * 8)
+
+#define CHECK(cond) if (!(cond)) { fprintf(stderr, "\"" #cond "\" failed\n"); _exit(-1); }
+
+struct shmem_data {
+    uint32_t num_edges;
+    unsigned char edges[];
+};
+
+struct shmem_data* __shmem;
+
+uint32_t *__edges_start, *__edges_stop;
+void __sanitizer_cov_reset_edgeguards() {
+    uint64_t N = 0;
+    for (uint32_t *x = __edges_start; x < __edges_stop && N < MAX_EDGES; x++)
+        *x = ++N;
+}
+
+extern "C" void __sanitizer_cov_trace_pc_guard_init(uint32_t *start, uint32_t *stop) {
+    // Avoid duplicate initialization
+    if (start == stop || *start)
+        return;
+
+    if (__edges_start != NULL || __edges_stop != NULL) {
+        fprintf(stderr, "Coverage instrumentation is only supported for a single module\n");
+        _exit(-1);
+    }
+
+    __edges_start = start;
+    __edges_stop = stop;
+
+    // Map the shared memory region
+    const char* shm_key = getenv("SHM_ID");
+    if (!shm_key) {
+        puts("[COV] no shared memory bitmap available, skipping");
+        __shmem = (struct shmem_data*) malloc(SHM_SIZE);
+    } else {
+        int fd = shm_open(shm_key, O_RDWR, S_IREAD | S_IWRITE);
+        if (fd <= -1) {
+            fprintf(stderr, "Failed to open shared memory region: %s\n", strerror(errno));
+            _exit(-1);
+        }
+
+        __shmem = (struct shmem_data*) mmap(0, SHM_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
+        if (__shmem == MAP_FAILED) {
+            fprintf(stderr, "Failed to mmap shared memory region\n");
+            _exit(-1);
+        }
+    }
+
+    __sanitizer_cov_reset_edgeguards();
+
+    __shmem->num_edges = stop - start;
+    printf("[COV] edge counters initialized. Shared memory: %s with %u edges\n", shm_key, __shmem->num_edges);
+}
+
+extern "C" void __sanitizer_cov_trace_pc_guard(uint32_t *guard) {
+    if (!*guard) return;
+    uint32_t index = *guard - 1;
+    __shmem->edges[index / 8] |= 1 << (index % 8);
+    *guard = 0;
+}
+
+//
+// END FUZZING CODE
+//
+
+
 // Avoid an unnecessary NSPR dependency on Linux and OS X just for the shell.
 #ifdef JS_POSIX_NSPR
 
@@ -511,6 +589,7 @@ static uint32_t gZealFrequency = 0;
 static bool printTiming = false;
 static RCFile* gErrFile = nullptr;
 static RCFile* gOutFile = nullptr;
+static RCFile* gFuzzoutFile = nullptr;
 static bool reportWarnings = true;
 static bool compileOnly = false;
 static bool fuzzingSafe = false;
@@ -2680,6 +2759,11 @@ static bool PrintErr(JSContext* cx, unsigned argc, Value* vp) {
   return PrintInternal(cx, args, gErrFile);
 }
 
+static bool PrintFuzzout(JSContext* cx, unsigned argc, Value* vp) {
+  CallArgs args = CallArgsFromVp(argc, vp);
+  return PrintInternal(cx, args, gFuzzoutFile);
+}
+
 static bool Help(JSContext* cx, unsigned argc, Value* vp);
 
 static bool Quit(JSContext* cx, unsigned argc, Value* vp) {
@@ -3662,6 +3746,25 @@ static bool Clone(JSContext* cx, unsigned argc, Value* vp) {
 
 static bool Crash(JSContext* cx, unsigned argc, Value* vp) {
   CallArgs args = CallArgsFromVp(argc, vp);
+
+  double arg;
+  if (!ToNumber(cx, args.get(0), &arg)) {
+    return true;
+  }
+
+  int type = arg;
+  switch (type) {
+    case 0:
+      *((int*)0x41414141) = 0x1337;
+      break;
+    case 1:
+      MOZ_RELEASE_ASSERT(false);
+      break;
+    default:
+      MOZ_ASSERT(false);
+      break;
+  }
+
   if (args.length() == 0) {
     MOZ_CRASH("forced crash");
   }
@@ -8429,6 +8532,10 @@ static const JSFunctionSpecWithHelp shell_functions[] = {
 "printErr([exp ...])",
 "  Evaluate and print expressions to stderr."),
 
+    JS_FN_HELP("__fuzzout__", PrintFuzzout, 0, 0,
+"__fuzzout__([exp ...])",
+"  Evaluate and print expressions to fuzzer output stream."),
+
     JS_FN_HELP("putstr", PutStr, 0, 0,
 "putstr([exp])",
 "  Evaluate and print expression without newline."),
@@ -9002,6 +9109,14 @@ JS_FN_HELP("parseBin", BinParse, 1, 0,
 "    object: Don't create a new DOM object, but instead use the supplied\n"
 "            FakeDOMObject."),
 
+    JS_FN_HELP("crash", Crash, 0, 0,
+"crash([message, [{disable_minidump:true}]])",
+"  Crashes the process with a MOZ_CRASH, optionally providing a message.\n"
+"  An options object may be passed as the second argument. If the key\n"
+"  'suppress_minidump' is set to true, then a minidump will not be\n"
+"  generated by the crash (which only has an effect if the breakpad\n"
+"  dumping library is loaded.)"),
+
     JS_FS_HELP_END
 };
 // clang-format on
@@ -9057,14 +9172,6 @@ TestAssertRecoveredOnBailout,
 "  any. If |fun| is not a scripted function or has not been compiled by\n"
 "  Ion, null is returned."),
 
-    JS_FN_HELP("crash", Crash, 0, 0,
-"crash([message, [{disable_minidump:true}]])",
-"  Crashes the process with a MOZ_CRASH, optionally providing a message.\n"
-"  An options object may be passed as the second argument. If the key\n"
-"  'suppress_minidump' is set to true, then a minidump will not be\n"
-"  generated by the crash (which only has an effect if the breakpad\n"
-"  dumping library is loaded.)"),
-
     JS_FN_HELP("setARMHwCapFlags", SetARMHwCapFlags, 1, 0,
 "setARMHwCapFlags(\"flag1,flag2 flag3\")",
 "  On non-ARM, no-op. On ARM, set the hardware capabilities. The list of \n"
@@ -10024,6 +10131,55 @@ static MOZ_MUST_USE bool ProcessArgs(JSContext* cx, OptionParser* op) {
   binASTPaths = op->getMultiStringOption('B');
 #endif  // JS_BUILD_BINAST
 
+  // Check for REPRL file source
+  if (op->getBoolOption("reprl")) {
+    size_t script_size = 0;
+
+    unsigned action;
+    CHECK(read(REPRL_CRFD, &action, 4) == 4);
+    if (action == 'cexe') {
+      CHECK(read(REPRL_CRFD, &script_size, 8) == 8);
+    } else {
+      fprintf(stderr, "Unknown action: %u\n", action);
+      _exit(-1);
+    }
+
+    CompileOptions options(cx);
+    options.setIntroductionType("reprl")
+        .setFileAndLine("reprl", 1)
+        .setIsRunOnce(true)
+        .setNoScriptRval(true);
+
+    
+    char* script_src = (char*)malloc(script_size);
+
+    char* ptr = script_src;
+    size_t remaining = script_size;
+    while (remaining > 0) {
+      ssize_t rv = read(REPRL_DRFD, ptr, remaining);
+      if (rv <= 0) {
+        fprintf(stderr, "Failed to load script\n");
+        _exit(-1);
+      }
+      remaining -= rv;
+      ptr += rv;
+    }
+
+    RootedScript script(cx);
+
+    if (!JS::CompileUtf8(cx, options, script_src, script_size, &script)) {
+      free(script_src);
+      return false;
+    }
+    free(script_src);
+
+    if (!JS_ExecuteScript(cx, script)) {
+      return false;
+    }
+
+    return true;
+  }
+
   if (filePaths.empty() && utf8FilePaths.empty() && codeChunks.empty() &&
       modulePaths.empty() && binASTPaths.empty() &&
       !op->getStringArg("script")) {
@@ -10667,6 +10823,27 @@ static int Shell(JSContext* cx, OptionParser* op, char** envp) {
     defaultToSameCompartment = false;
   }
 
+  // Check if we should use REPRL mode
+  bool reprl_mode = op->getBoolOption("reprl");
+  if (reprl_mode) {
+    // Check in with parent
+    char helo[] = "HELO";
+    if (write(REPRL_CWFD, helo, 4) != 4 ||
+        read(REPRL_CRFD, helo, 4) != 4) {
+      reprl_mode = false;
+    }
+
+    if (memcmp(helo, "HELO", 4) != 0) {
+      fprintf(stderr, "Invalid response from parent\n");
+      _exit(-1);
+    }
+  }
+
+  // Begin REPRL Loop
+  int result = EXIT_SUCCESS;
+  do {
+  // Keep original indention here for easier diffing against newer versions
+
   JS::RealmOptions options;
   SetStandardRealmOptions(options);
   RootedObject glob(cx, NewGlobalObject(cx, options, nullptr));
@@ -10677,7 +10854,8 @@ static int Shell(JSContext* cx, OptionParser* op, char** envp) {
   JSAutoRealm ar(cx, glob);
 
   ShellContext* sc = GetShellContext(cx);
-  int result = EXIT_SUCCESS;
+  sc->exitCode = 0;
+  result = EXIT_SUCCESS;
   {
     AutoReportException are(cx);
     if (!ProcessArgs(cx, op) && !sc->quitting) {
@@ -10707,6 +10885,16 @@ static int Shell(JSContext* cx, OptionParser* op, char** envp) {
     result = sc->exitCode;
   }
 
+  if (reprl_mode) {
+    // Send return code to parent and reset edge counters.
+    int status = result << 8;
+    CHECK(write(REPRL_CWFD, &status, 4) == 4);
+    __sanitizer_cov_reset_edgeguards();
+  }
+
+  // End REPRL loop
+  } while (reprl_mode);
+
   if (enableDisassemblyDumps) {
     AutoReportException are(cx);
     if (!js::DumpRealmPCCounts(cx)) {
@@ -10807,9 +10995,11 @@ int main(int argc, char** argv, char** envp) {
   rcStdout.acquire();
   RCFile rcStderr(stderr);
   rcStderr.acquire();
+  RCFile rcFuzzout(fdopen(REPRL_DWFD, "w"));
 
   SetOutputFile("JS_STDOUT", &rcStdout, &gOutFile);
   SetOutputFile("JS_STDERR", &rcStderr, &gErrFile);
+  SetOutputFile("JS_FUZZOUT", &rcFuzzout, &gFuzzoutFile);
 
   // Start the engine.
   if (!JS_Init()) {
@@ -11078,7 +11268,9 @@ int main(int argc, char** argv, char** envp) {
                         "Suppress crash minidumps") ||
       !op.addBoolOption('\0', "wasm-compile-and-serialize",
                         "Compile the wasm bytecode from stdin and serialize "
-                        "the results to stdout")) {
+                        "the results to stdout") ||
+      !op.addBoolOption('\0', "reprl",
+                        "Enable REPRL mode for fuzzing")) {
     return EXIT_FAILURE;
   }
 
